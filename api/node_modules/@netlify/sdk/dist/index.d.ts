import type { NetlifyPluginOptions } from "@netlify/build";
import { NetlifyIntegrationClient } from "./api/integration.js";
export type { NetlifyClient, Site, Account, EnvironmentVariableValue, EnvironmentVariable, CreateHookRequest, BuildHookResponse, } from "./api/netlify.js";
export { NetlifyIntegration } from "./integration/index.js";
export { NetlifyIntegrationUI } from "./integration/ui/index.js";
export * from "@netlify/integrations";
export { z } from "zod";
export type BuildHookType = "onPreBuild" | "onBuild" | "onPostBuild" | "onSuccess" | "onError" | "onEnd";
export declare const BuildHook: Record<string, BuildHookType>;
export type BuildHookFunction = (options: NetlifyPluginOptions) => Promise<void>;
export type BuildHookWithContext<Context extends Record<string, any> = Record<string, never>, Config extends Record<string, any> = Record<string, never>> = (options: {
    buildContext?: Context;
    buildConfig?: Config;
} & Omit<NetlifyPluginOptions, "inputs">) => void | Promise<void>;
export type BuildHookOptions = {
    if: (buildConfig: Record<string, any>) => boolean | undefined;
};
export type NetlifySdkContext<SiteConfig = any, TeamConfig = any> = {
    client: NetlifyIntegrationClient<SiteConfig, TeamConfig>;
    siteId?: string;
    teamId?: string;
    providerOAuthToken?: string;
};
export { NetlifyIntegrationClient } from "./api/integration.js";
export { UIElementButtonOptions, UIElementCardOptions, UIElementFormOptions, UIElementSectionOptions, UIElementTextOptions, UIElementInputTextOptions, UIElementInputSelectOptions, UIElementInputPasswordOptions, UIElementUnorderedListOptions, UIElementLinkOptions, UIElementDisableIntegrationSectionOptions, UIElementOrderedListOptions, UIElementCodeSnippetOptions, UIElementConnectionOptions, UIElementAlertOptions, } from "./integration/ui/types.js";
export { SurfaceRoute } from "./integration/ui/surface/surfaceRoute.js";
export { CallbackFunc, SurfaceState } from "./integration/ui/surface/types.js";

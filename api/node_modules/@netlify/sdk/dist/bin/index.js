#!/usr/bin/env node
import path from "path";
import { createRequire } from "node:module";
export async function main() {
    if (await attemptToUseLocalSDKBin()) {
        return; // we switched to the local bin, don't run the rest of the code below
    }
    const { Command } = await import("commander");
    const { build, dev, preview, init } = await import("../cli/commands/index.js");
    const program = new Command();
    program
        .command("init")
        .action(init)
        .option("-s, --slug <slug>", "The slug of the integration");
    const buildFlags = [
        ["-a, --all", "Build all components of the integration", false],
        [
            "-c, --connector",
            "Build the Netlify Connect plugin of the integration",
            false,
        ],
        ["-w, --watch", "Build integration and then watch for changes", false],
        [
            "-b, --buildtime",
            "Build the buildtime component of the integration",
            false,
        ],
        ["-s, --site", "Build the serverless component of the integration", false],
    ];
    const buildCommander = program.command("build").action((opts) => {
        build(opts);
    });
    const devCommander = program.command("dev").action((opts) => {
        dev(opts);
    });
    for (const option of buildFlags) {
        buildCommander.option(...option);
        const [flag] = option;
        // dev always watches, no flag needed
        if (!flag.includes(`--watch`)) {
            devCommander.option(...option);
        }
    }
    program
        .command("preview")
        .action((opts) => {
        preview(opts);
    })
        .option("-c, --connector", "Preview the GraphQL server for your Netlify Connect plugin")
        .option("-d --dev", "Run the preview server in development mode", false);
    program.parse();
}
if (!process.env.SDK_BIN_SWITCH_PATH) {
    main();
}
async function attemptToUseLocalSDKBin() {
    try {
        if (process.env.SDK_BIN_SWITCH_PATH) {
            return false;
        }
        const requirePath = path.join(process.cwd() +
            // without subdir it seems to want to resolve from the parent dir of cwd
            `/subdir`);
        const require = createRequire(requirePath);
        const localBinPath = require.resolve("@netlify/sdk/bin");
        if (!localBinPath) {
            return false;
        }
        process.env.SDK_BIN_SWITCH_PATH = localBinPath;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore - this import may or may not exist. If it doesn't, we'll catch the error and fall back to the global SDK
        const bin = await import(localBinPath);
        if (`main` in bin && typeof bin.main === `function`) {
            await bin.main();
            return true;
        }
        else {
            return false;
        }
    }
    catch (e) {
        console.log(``);
        e instanceof Error ? console.error(e.message) : console.error(e);
        console.log(``);
        console.warn(`Errored importing local @netlify/sdk module. Falling back to the globally installed bin. Upgrade your project to the latest version of @netlify/sdk to fix this error.\n`);
    }
    return false;
}

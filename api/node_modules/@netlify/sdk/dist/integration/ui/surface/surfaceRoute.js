export class Surface {
    _elements;
    _callbacks;
    _formCallbacks;
    _interactiveCallbacks;
    _formId;
    _useIdentity;
    get elements() {
        return this._elements;
    }
    get callbacks() {
        return this._callbacks;
    }
    get formCallbacks() {
        return this._formCallbacks;
    }
    get interactiveCallbacks() {
        return this._interactiveCallbacks;
    }
    get useIdentity() {
        return this._useIdentity;
    }
    constructor() {
        this._elements = [];
        this._callbacks = {};
        this._formCallbacks = {};
        this._interactiveCallbacks = {};
        this._useIdentity = false;
    }
    addText(options) {
        const { value, if: _if, display, id } = options;
        this._elements.push({
            type: "text",
            value,
            id,
            if: _if,
            display,
        });
        return this;
    }
    addLink(options) {
        const { href, text, if: _if, display, id, target } = options;
        this._elements.push({
            type: "link",
            href,
            text,
            id,
            if: _if,
            display,
            target,
        });
        return this;
    }
    addButton(options) {
        const { id, callback, title, if: if_, display, variant, confirmationMessage, } = options;
        this._elements.push({
            type: "button",
            title,
            id,
            variant,
            confirmationMessage,
            if: if_,
            display,
        });
        this._callbacks[id + ":click"] = callback;
        return this;
    }
    addUnorderedList(options) {
        const { id, items, if: if_, display } = options;
        this._elements.push({
            type: "unordered-list",
            id,
            items,
            if: if_,
            display,
        });
        return this;
    }
    addOrderedList(options) {
        const { id, items, if: if_, display } = options;
        this._elements.push({
            type: "ordered-list",
            id,
            items,
            if: if_,
            display,
        });
        return this;
    }
    addSection(options, builder) {
        const { title, description, if: _if, display, id } = options;
        const section = new Surface();
        builder(section);
        const sectionElement = {
            type: "section",
            title,
            id,
            description,
            contents: section.elements,
            if: _if,
            display,
        };
        this._callbacks = { ...this._callbacks, ...section.callbacks };
        this._formCallbacks = { ...this._formCallbacks, ...section.formCallbacks };
        this._useIdentity = this._useIdentity || section.useIdentity;
        this._interactiveCallbacks = {
            ...this._interactiveCallbacks,
            ...section.interactiveCallbacks,
        };
        this._elements.push(sectionElement);
        return this;
    }
    addCard(options, builder) {
        const { title, description, if: _if, display, id } = options;
        const card = new Surface();
        builder(card);
        const cardElement = {
            type: "card",
            title,
            description,
            id,
            contents: card.elements,
            if: _if,
            display,
        };
        this._callbacks = { ...this._callbacks, ...card.callbacks };
        this._formCallbacks = { ...this._formCallbacks, ...card.formCallbacks };
        this._useIdentity = this._useIdentity || card.useIdentity;
        this._interactiveCallbacks = {
            ...this._interactiveCallbacks,
            ...card.interactiveCallbacks,
        };
        this._elements.push(cardElement);
        return this;
    }
    addInputText(options) {
        const { id, label, value, placeholder, helpText, required, leftLabel, floatingLabel, if: _if, fieldType, display, validation, } = options;
        this._elements.push({
            type: "input-text",
            id: this._formId + "_" + id,
            label,
            value,
            placeholder,
            helpText,
            required,
            leftLabel,
            floatingLabel,
            fieldType,
            if: _if,
            display,
            validation,
        });
        return this;
    }
    addInputSelect(selectOptions) {
        const { if: _if, display, id, label, placeholder, options, helpText, required, callback, } = selectOptions;
        this._elements.push({
            type: "select",
            id: this._formId ? this._formId + "_" + id : id,
            label,
            options: options ?? [],
            placeholder,
            helpText,
            required,
            if: _if,
            display,
        });
        if (callback) {
            const elementId = this._formId ? this._formId + "_" + id : id;
            this._interactiveCallbacks[elementId + ":onChange"] = callback;
        }
        return this;
    }
    addInputPassword(options) {
        const { id, label, value, placeholder, helpText, required, leftLabel, floatingLabel, if: _if, display, validation, } = options;
        this._elements.push({
            type: "input-password",
            id: this._formId + "_" + id,
            label,
            value,
            placeholder,
            helpText,
            required,
            leftLabel,
            floatingLabel,
            if: _if,
            display,
            validation,
        });
        return this;
    }
    addAlert(options) {
        const { id, level, text, if: _if, display } = options;
        this._elements.push({
            type: "alert",
            id,
            level,
            text,
            if: _if,
            display,
        });
        return this;
    }
    addForm(options, builder) {
        const { title, description, if: _if, display, onSubmit, id, saveLabel, savingLabel, variant, hideCancel, } = options;
        const form = new Surface();
        form._formId = id;
        builder(form);
        const formElement = {
            type: "form",
            title,
            id,
            description,
            saveLabel,
            savingLabel,
            contents: form.elements,
            if: _if,
            display,
            variant,
            hideCancel,
        };
        this._callbacks = { ...this._callbacks, ...form.callbacks };
        this._useIdentity = this._useIdentity || form.useIdentity;
        if (onSubmit) {
            this._formCallbacks[id + ":submit"] = onSubmit;
        }
        this._formCallbacks = { ...this._formCallbacks, ...form.formCallbacks };
        this._interactiveCallbacks = {
            ...this._interactiveCallbacks,
            ...form.interactiveCallbacks,
        };
        this._elements.push(formElement);
        return this;
    }
    addOAuthCard(options) {
        const { id, if: _if, display, connectWithMessage, disconnectFromMessage, providerFriendlyName, disconnectWarning, } = options;
        this._elements.push({
            type: "connection",
            id,
            if: _if,
            display,
            connectWithMessage,
            providerFriendlyName,
            disconnectFromMessage,
            disconnectWarning,
        });
        this._useIdentity = true;
        return this;
    }
    addDisableIntegrationSection(options) {
        const { integrationName, description, if: _if, display } = options;
        this._elements.push({
            type: "disable-integration",
            integrationName,
            description,
            if: _if,
            display,
        });
        return this;
    }
    addCodeSnippet(options) {
        const { code, language, if: _if, display, id } = options;
        this._elements.push({
            type: "code-snippet",
            code,
            language,
            id,
            if: _if,
            display,
        });
        return this;
    }
}
export class SurfaceRoute extends Surface {
    _path;
    _onLoadCallbacks;
    get path() {
        return this._path;
    }
    get onLoadCallbacks() {
        return this._onLoadCallbacks;
    }
    constructor(path) {
        super();
        this._path = path;
        this._onLoadCallbacks = [];
    }
    onLoad(callback) {
        this._onLoadCallbacks.push(callback);
        return this;
    }
}

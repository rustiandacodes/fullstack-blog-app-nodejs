import { SourceNodesArgs } from "content-engine";
import { NodesApi } from "../sdk.js";
import { ModelDefinition, DefineObjectArgs, DefineUnionArgs, DefineNodeArgs } from "./definition.js";
export type ModelerArgs = {
    define: ModelBuilder["pluginAPI"]["define"];
    cache: SourceNodesArgs["cache"];
};
export type Modeler = ({ define, cache }: ModelerArgs, configurationOptions: Record<string, any>) => Promise<void>;
export declare class ModelBuilder {
    models: Map<string, ModelDefinition>;
    modelDataAPIs: Record<string, ModelDefinition["dataAPI"]>;
    complete: boolean;
    sdl: string;
    typePrefix: string;
    nodesApi: NodesApi;
    private seenTypePaths;
    constructor({ nodesApi }: {
        nodesApi: NodesApi;
    });
    get pluginAPI(): {
        define: {
            /**
             * Defines a node model. Nodes are database records that can be queried by their ID. Defining a type allows you to create and update nodes of that type during the createAllNodes and updateNodes data events.
             */
            nodeModel: ({ name, fields, cacheFieldName }: DefineNodeArgs) => ModelDefinition;
            /**
             * Defines an object type. Object types are used to define fields on node models.
             */
            object: ({ name, fields }: DefineObjectArgs) => ModelDefinition;
            /**
             * Defines a union type. Union types are used to define fields on node models where the field may be of multiple different types.
             */
            union: ({ name, types }: DefineUnionArgs) => ModelDefinition;
        };
    };
    build({ modeler, typePrefix, cache, configurationOptions, }: {
        modeler: Modeler;
        typePrefix: string;
        cache: SourceNodesArgs["cache"];
        configurationOptions: Record<string, any>;
    }): Promise<{
        sdl: string;
    }>;
    addModel(model: ModelDefinition): this;
    private reset;
    private finalizeModels;
    private setSeenTypePaths;
    private validateModelHarmony;
    private panicOnMixedUnionTypes;
    private panicOnUndefinedModels;
}

import { NodesApi } from "../sdk.js";
import { ModelWalker } from "./walker.js";
import { ModelBuilder } from "./builder.js";
type DefineArgs = {
    name: string;
    description?: string;
};
export type DefineObjectArgs = DefineArgs & {
    fields: ModelFields;
};
export type DefineNodeArgs = DefineObjectArgs & {
    cacheFieldName?: string;
};
export type DefineUnionArgs = DefineArgs & {
    types: Array<string | ModelDefinition>;
};
type DefineKind = `Object` | `Union` | `Node`;
export type ModelField = {
    type: string | ModelDefinition;
    required?: boolean;
    list?: boolean | `required`;
    description?: string;
};
export type ModelFields = {
    [fieldName: string]: ModelField;
};
export type RawNodeObject = {
    id: string;
    [key: string]: any;
};
export declare const builtInTypes: Set<string>;
export declare const mappedBuiltinTypes: Map<string, string>;
type ModelDefinitionInput = {
    kind: DefineKind;
    ModelBuilder: ModelBuilder;
    nodesApi: NodesApi;
} & DefineArgs & Partial<DefineNodeArgs & DefineObjectArgs & DefineUnionArgs>;
export declare class ModelDefinition {
    compositeTypes?: Array<string | ModelDefinition>;
    compositeTypesSet: Set<string>;
    description?: string;
    cacheFieldName?: string;
    ModelWalker: ModelWalker;
    private definedKind;
    private typeName;
    private fields;
    private ModelBuilder;
    private nodesApi;
    constructor(input: ModelDefinitionInput);
    getFields(): ModelFields;
    getTypeName(): string;
    get isNodeType(): boolean;
    get isObjectType(): boolean;
    get isUnionType(): boolean;
    getDefinedTypeName(type: string | ModelDefinition, fieldName?: string): string;
    prefixedTypeName(typeName?: string): string;
    get dataAPI(): {
        create: (nodes: RawNodeObject | RawNodeObject[]) => void | Promise<void> | (void | Promise<void>)[];
        delete: (nodes: string | string[]) => void | void[];
    };
    buildWalker(): void;
    private getModelByName;
    hasField(fieldName: string): boolean;
    private get delete();
    private get create();
    createNodeId(rawId: string): string;
    private prepareNode;
    toSDL(): string;
    private containsIllegalChars;
    private validateDefinition;
    private validateFieldDefinition;
}
export {};

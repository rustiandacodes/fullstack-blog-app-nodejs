import type { Schema } from "zod";
import zodLib from "zod";
import type { GatsbyNode, SourceNodesArgs, PluginOptions } from "content-engine";
import { ModelDefinition } from "./model/definition.js";
import { Modeler } from "./model/builder.js";
declare module "zod" {
    interface ZodMeta {
        [k: string | number | symbol]: unknown;
    }
    interface ZodTypeDef {
        meta?: ZodMeta;
    }
    interface ZodType<Output = any, Def extends zodLib.ZodTypeDef = zodLib.ZodTypeDef, Input = Output> {
        getMeta(): this["_def"] extends {
            meta: infer M;
        } ? M : ZodMeta | undefined;
        meta<T extends ZodMeta = ZodMeta>(meta: T): ZodType<Output, Def extends {
            meta: infer M;
        } ? Def & {
            meta: M & T;
        } : Def & {
            meta: T;
        }, Input>;
    }
}
export type ConnectorConfig = {
    typePrefix: string;
    localDevOptions?: {
        [key: string]: string | boolean | number;
    };
    /**
     * @deprecated use localDevOptions instead.
     */
    devConfigOptions?: {
        [key: string]: string | boolean | number;
    };
};
type WrappedNodeApi<Key extends keyof GatsbyNode> = (apiImplementation: GatsbyNode[Key]) => void;
type NodeApis = {
    [Key in keyof GatsbyNode]: WrappedNodeApi<Key>;
};
export type NetlifyConnectorInstance = InstanceType<typeof NetlifyConnector>;
export type NodesApi = Partial<SourceNodesArgs["actions"] & {
    createNodeId: SourceNodesArgs["createNodeId"];
    cache: SourceNodesArgs["cache"];
    pluginOptions: PluginOptions;
}>;
type CreateNodesPluginApi = (createAllNodesApi: {
    models: Record<string, ModelDefinition["dataAPI"]>;
    cache: SourceNodesArgs["cache"];
}, pluginOptions: PluginOptions) => Promise<void> | void;
export declare class NetlifyConnector<C extends ConnectorConfig> implements Partial<NodeApis> {
    config: C;
    apiImplementations: Partial<GatsbyNode>;
    private started;
    private warmCacheKey;
    private ModelBuilder;
    private nodesApi;
    private definedEvents;
    private onPluginInitImplementation?;
    private optionsSchema?;
    constructor(config: C);
    onCreateNode: (pluginApiImplementation: (args: import("content-engine").CreateNodeArgs<Record<string, unknown>>, options: PluginOptions, callback: import("content-engine").PluginCallback<void>) => void) => void;
    onPluginInit: (onInit: GatsbyNode["onPluginInit"]) => void;
    /**
     * Defines the user configuration options for your Connector.
     * @link https://sdk.netlify.com/connectors/connector-apis/#defineoptions
     */
    defineOptions: (definer: ({ zod }: {
        zod: typeof zodLib;
    }) => Schema<any>) => void;
    getOptionsSchema(): zodLib.ZodObject<{
        [x: string]: any;
    }, zodLib.UnknownKeysParam, zodLib.ZodTypeAny, {
        [x: string]: any;
    }, {
        [x: string]: any;
    }>;
    pluginOptionsSchema: () => never;
    /**
     * Defines the content model for your Connector.
     * @link https://sdk.netlify.com/connectors/connector-apis/#model
     */
    model(modeler: Modeler): void;
    /**
     * Defines a data event. Supported events are `createAllNodes` and `updateNodes`.
     * @link https://sdk.netlify.com/connectors/connector-apis/#createallnodes
     */
    event(name: "createAllNodes" | "updateNodes", implementation: CreateNodesPluginApi | false): void;
    private checkHasStarted;
    private wrapEngineApi;
}
export {};

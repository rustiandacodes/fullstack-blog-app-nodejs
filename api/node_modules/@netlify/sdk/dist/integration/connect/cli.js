import { resolve, join } from "path";
import { execSync } from "child_process";
import { contentEngine } from "content-engine";
import { outdent as javascript } from "outdent";
import fsExtra from "fs-extra";
import chalk from "chalk";
import { removeBundledDepsFromPackageJsonContents, } from "../../cli/util.js";
const { writeFile, writeJSON, copyFile, ensureDir } = fsExtra;
/**
 * Adds the absolute path of the bundled plugin package.json to the engine config
 * when the engine is started this allows it to use the bundled local plugin.
 */
function getEngineConfigWithBundledPlugin({ integration, path, }) {
    const connectorConfig = integration?.netlifyConnectPlugin?.config || {};
    if (`developmentConfig` in connectorConfig) {
        throw new Error(`developmentConfig has been replaced with localDevOptions. The old config took a list of plugins while the new one takes an object of options for your connector to be used during connector development.`);
    }
    if (`devConfigOptions` in connectorConfig) {
        throw new Error(`devConfigOptions has been renamed to localDevOptions. The functionality has not changed, only the name has.`);
    }
    // specifying the path to a package.json file in the plugins array will cause the plugin to be loaded from that path
    const localPluginPackageJSONPath = resolve(path, `.ntli/connector`, `package.json`);
    const engineConfig = {
        plugins: [
            {
                resolve: localPluginPackageJSONPath,
                options: integration?.netlifyConnectPlugin?.config?.localDevOptions || {},
            },
        ],
    };
    return engineConfig;
}
export async function createDevelopmentContentEngine({ integration, path, }) {
    console.log("Starting Content Engine...");
    const engineConfig = getEngineConfigWithBundledPlugin({
        integration,
        path,
    });
    const engine = contentEngine({
        engineConfig, // this configures plugin settings for the engine. developers that use the SDK specify these when calling integration.addConnector({ localDevOptions: { ... } })
    });
    return { engine };
}
export const generateConnectPlugin = async (integrationWorker, config, opts) => {
    const { outDir, watchMode } = opts;
    const connectorDir = resolve(outDir, `connector`);
    const contentEngineApiNames = await integrationWorker.implementedConnectorAPINames();
    if (!contentEngineApiNames.length) {
        console.log(chalk.white("No Netlify Connect plugin API's found."));
        return;
    }
    const packageJSONContents = await fsExtra.readJSON(resolve(process.cwd(), `package.json`));
    // there should be no bundled dependencies in the plugin package.json
    // because they're in the bundle already.
    const normalizedPackageJSON = removeBundledDepsFromPackageJsonContents(packageJSONContents);
    // a .ts "main" will cause content-engine and gatsby to error.
    delete normalizedPackageJSON.main;
    let version;
    if (watchMode) {
        // changing the version in watch mode every time will cause the cache to be wiped out on every code save. Can't do that! If there's no version in package.json then allow it to be undefined.
        version = normalizedPackageJSON.version;
    }
    else {
        // if it's not watch mode then it's build mode, prefer the package.json version and fall back to the generated version if it's not there. A version is needed for the package to be published. Using Date.now() will mean each new release is numerically sortable as later than the last release.
        version = normalizedPackageJSON.version || `0.0.0-${Date.now()}`;
    }
    const name = `${config.slug}-connector`;
    await ensureDir(connectorDir);
    await copyFile(resolve(outDir, "index.js"), resolve(connectorDir, "index.js"));
    const sourceMapJSON = await fsExtra.readJSON(resolve(outDir, "index.js.map"));
    sourceMapJSON.sources = sourceMapJSON.sources.map((source) => join(`../`, source));
    await writeJSON(resolve(connectorDir, `index.js.map`), sourceMapJSON);
    await writeJSON(resolve(connectorDir, `package.json`), {
        ...normalizedPackageJSON,
        name,
        version,
    }, {
        spaces: 2,
    });
    await writeFile(resolve(connectorDir, `gatsby-node.js`), javascript `
      import { integration } from "./index.js";
      const { apiImplementations } = integration.netlifyConnectPlugin;

      ${contentEngineApiNames
        .map((apiName) => javascript `export const ${apiName} = apiImplementations.${apiName};`)
        .join(`\n`)}
    `);
    await integrationWorker.writeConnectorOptionsSchema();
    if (!watchMode) {
        execSync(`npm pack`, {
            cwd: connectorDir,
        });
        const packedFile = `${name
            .replaceAll("@", "")
            .replaceAll("/", "-")}-${version}.tgz`;
        await ensureDir(resolve(outDir, "site/static/packages"));
        await copyFile(resolve(outDir, `connector/${packedFile}`), resolve(outDir, "site/static/packages", "connector.tgz"));
    }
};

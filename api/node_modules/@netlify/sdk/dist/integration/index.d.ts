import { Handler } from "@netlify/functions";
import { IntegrationHandler, FunctionHandler } from "@netlify/integrations";
import { ZodSchema, ZodUnknown } from "zod";
import { BuildHookType, NetlifySdkContext, BuildHookWithContext, BuildHookOptions, BuildHookFunction } from "../index.js";
import { ConnectorConfig, NetlifyConnectorInstance, NetlifyConnector } from "./connect/sdk.js";
import type { BuildContextHandler, BuildHooks, BuildHooksOptions, Handlers, NetlifyIntegrationProps, Wrappers } from "./types.js";
export declare class NetlifyIntegration<SiteConfigSchema extends ZodSchema = ZodUnknown, TeamConfigSchema extends ZodSchema = ZodUnknown, BuildContext extends ZodSchema = ZodUnknown, BuildConfigSchema extends ZodSchema = ZodUnknown> {
    private _buildHooks;
    private _wrappers;
    private _handlers;
    private _netlifyConnectPlugin?;
    _buildConfigurationSchema?: BuildConfigSchema;
    _buildContextSchema?: BuildContext;
    _siteConfigSchema?: SiteConfigSchema;
    _teamConfigSchema?: TeamConfigSchema;
    _slug: string;
    private _buildHooksOptions;
    constructor({ buildConfigSchema, buildContextSchema, siteConfigSchema, teamConfigSchema, }?: NetlifyIntegrationProps<BuildConfigSchema, BuildContext, SiteConfigSchema, TeamConfigSchema>);
    get buildSlug(): string;
    /**
     * Used to add a build event handlers to the integration.
     */
    addBuildEventHandler(type: BuildHookType, func: BuildHookWithContext<Zod.infer<BuildContext>, Zod.infer<BuildConfigSchema>>, options?: BuildHookOptions): void;
    /**
     * Used to add a build context to the integration that can be used in a build hook.
     */
    addBuildEventContext(handler: BuildContextHandler<Zod.infer<SiteConfigSchema>, Zod.infer<TeamConfigSchema>, Zod.infer<BuildContext>>): void;
    /**
     * Used to add an API Handler to the integration.
     */
    addApiHandler(name: string, handler: FunctionHandler<NetlifySdkContext<Zod.infer<SiteConfigSchema>, Zod.infer<TeamConfigSchema>>>): void;
    /**
     * Used to add a Wrapper to the integration.
     * @ignore for Typedoc
     */
    addWrapper(name: string, handler: IntegrationHandler): void;
    /**
     * The handler to use for the onEnable endpoint.
     */
    onEnable(handler: FunctionHandler<NetlifySdkContext<Zod.infer<SiteConfigSchema>, Zod.infer<TeamConfigSchema>>>): void;
    /**
     * The handler to use for the onDisable endpoint.
     */
    onDisable(handler: FunctionHandler<NetlifySdkContext<Zod.infer<SiteConfigSchema>, Zod.infer<TeamConfigSchema>>>): void;
    /**
     * The handler to use for the onDisconnect endpoint.
     */
    onDisconnect(handler: FunctionHandler<NetlifySdkContext<Zod.infer<SiteConfigSchema>, Zod.infer<TeamConfigSchema>>>): void;
    /**
     * @ignore for Typedoc
     */
    addWebhookHandler(name: string, handler: FunctionHandler<NetlifySdkContext<Zod.infer<SiteConfigSchema>, Zod.infer<TeamConfigSchema>>>): void;
    get buildHooks(): BuildHooks;
    get buildHooksOptions(): BuildHooksOptions;
    get handlers(): Handlers;
    get wrappers(): Wrappers;
    get baseHandler(): Handler;
    /**
     * Deprecated
     * @deprecated createConnector has been renamed to addConnector
     */
    createConnector(_config: ConnectorConfig): void;
    /**
     * Used to create a Connector for the integration.
     */
    addConnector(config: ConnectorConfig): NetlifyConnector<ConnectorConfig>;
    get netlifyConnectPlugin(): NetlifyConnectorInstance | null;
    getBuildConfig({ netlifyConfig }: {
        netlifyConfig: any;
    }): any;
    getBuildEventHandlersToRun({ netlifyConfig, }: {
        netlifyConfig: any;
    }): Record<string, BuildHookFunction>;
}

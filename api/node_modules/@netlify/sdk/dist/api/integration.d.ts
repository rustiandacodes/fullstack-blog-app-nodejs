import { Wretch } from "wretch";
import { NetlifyClient } from "./netlify.js";
export declare class AlreadyEnabledError extends Error {
    constructor();
}
export interface IntegrationResponse<Config> {
    config: Config;
    has_build_hook_enabled: boolean;
}
type BuildTokenValidationResponse = {
    token: string;
    site_id: string;
    team_id?: string;
};
export type IntegrationClientOptions = {
    netlifyApiUrl?: string;
};
export declare class NetlifyIntegrationClient<SiteConfiguration, TeamConfiguration> extends NetlifyClient {
    netlifyToken: string;
    integration: string;
    integrationApi: Wretch;
    constructor(netlifyToken: string, integration: string, options?: IntegrationClientOptions);
    /**
     * Returns the integration configuration for a site for the current integration.
     */
    getSiteIntegration: (siteId: string) => Promise<IntegrationResponse<SiteConfiguration>>;
    /**
     * Returns the integration configuration for a team for the current integration.
     */
    getTeamIntegration: (teamId: string) => Promise<IntegrationResponse<TeamConfiguration>>;
    /**
     * Enables this integration for a team, it is also possible to immediately pass a configuration object with the integration's configuration.
     */
    enableTeamIntegration: (teamId: string, config?: TeamConfiguration) => Promise<{
        token: string;
    }>;
    /**
     * Enables this integration for a site, passing a configuration object.
     */
    enableSiteIntegration: (siteId: string, config: SiteConfiguration) => Promise<{
        token: string;
    }>;
    /**
     * Updates the integration configuration for a site.
     */
    updateSiteIntegration: (siteId: string, config: SiteConfiguration) => Promise<import("wretch/types.js").WretchResponse>;
    /**
     * Updates the integration configuration for a team.
     */
    updateTeamIntegration: (teamId: string, config: TeamConfiguration) => Promise<import("wretch/types.js").WretchResponse>;
    /**
     * Disables this integration for a site, which also deletes the configuration.
     */
    disableSiteIntegration: (siteId: string) => Promise<import("wretch/types.js").WretchResponse>;
    /**
     * Disables this integration for a team, and deletes the associated configuration for the integration.
     */
    disableTeamIntegration: (teamId: string) => Promise<import("wretch/types.js").WretchResponse>;
    /**
     * Generates a build token for a site, allowing a build hook to use the Build Context API.
     */
    generateBuildToken: (siteId: string, teamId?: string) => Promise<{
        token: string;
    }>;
    /**
     * Validates a build token, returning the siteId and teamId if the token is valid and returning an error if the token is invalid.
     */
    exchangeBuildToken: (siteId: string) => Promise<BuildTokenValidationResponse>;
    /**
     * Sets the build token for a site. Build tokens can be created using the `generateBuildToken` method.
     */
    setBuildToken(accountId: string, siteId: string, token: string): Promise<void>;
    /**
     * Removes the build token for a site.
     */
    removeBuildToken(accountId: string, siteId: string): Promise<void>;
    /**
     * Enables the build hook for a site.
     */
    enableBuildEventHandlers: (siteId: string) => Promise<import("wretch/types.js").WretchResponse>;
    /**
     * Disables the build hook for a site.
     */
    disableBuildEventHandlers: (siteId: string) => Promise<import("wretch/types.js").WretchResponse>;
    enableConnectors: (teamId: string) => Promise<import("wretch/types.js").WretchResponse>;
    disableConnectors: (teamId: string) => Promise<import("wretch/types.js").WretchResponse>;
}
export {};

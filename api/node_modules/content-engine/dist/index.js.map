{"version":3,"file":"index.js","names":["contentEngine","engineOptions","directory","frameworkHooks","existsSync","Error","process","cwd","runInSubProcess","chdir","contentEngineDir","resolveFromContentEngine","require","state","exited","internalState","env","processListenersWereSet","stdErrListeners","stdOutListeners","messageListeners","onceReceived","message","Promise","res","subprocess","subProcess","exitListener","listener","receivedMessage","type","offMessage","offExit","payload","onMessage","onExit","createSubProcessIfNoneExists","exitCode","undefined","reporter","verbose","resolve","reduxDir","ControllableScript","JSON","stringify","start","stdout","on","data","forEach","stderr","proc","killed","console","error","shutdownService","code","signal","stop","catch","then","msg","send","exit","isRunning","sendFrameworkContext","context","initialize","clearCache","log","deleteCache","result","newErr","stack","cachePath","path","join","rm","recursive","force","getStore","resetCache","sync","runServer","webhookBody","buildSchema","connector","restart","options","inDebugMode","inspector","url","exitSignal","deferTestUtilToSubProcess","utilName","args","messageId","crypto","randomUUID","startsWith","replace","store","getLmdbStore","dbPath","getDefaultDbPath","engineApi","config","newConfig","normConfig","info","newEngine","Object","keys","key","test","throwOutsideTestEnv","getNodes","getNodesByType","getNode","query","id","getTypes","countNodes","iterateNodes","iterateNodesByType","runQuery","GATSBY_EXPERIMENTAL_LMDB_INDEXES","getProcess","onStdOut","callback","push","onStdErr","sendMessage","clearListeners","fns","fromEntries","entries","map","name","fn","NODE_ENV"],"sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport inspector from \"inspector\"\nimport { IGatsbyNode } from \"./redux/types\"\nimport onExit from \"signal-exit\"\nimport { ChildProcess } from \"child_process\"\nimport reporter from \"./reporter\"\nimport { GatsbyConfig } from \"./types\"\nimport { ControllableScript } from \"./utils/controllable-script\"\nimport crypto from \"crypto\"\nimport { ExecutionResult } from \"graphql\"\nimport { existsSync, rm } from \"fs-extra\"\nimport path from \"path\"\nimport { FrameworkContext } from \"./framework-hooks/index\"\nimport { resolveFromContentEngine } from \"./core-utils/create-require-from-path\"\nimport { IDataStore } from \"./datastore/types\"\nimport { getDefaultDbPath, getLmdbStore } from \"./datastore/lmdb/lmdb-datastore\"\n\nexport * from \"./types\"\nexport { setFrameworkHook } from \"./framework-hooks/index\"\n\nexport interface ContentEngineConfiguration {\n  directory?: string\n  verbose?: boolean\n  openTracingConfigFile?: string\n  host?: string\n  port?: number | string\n  engineConfig?: GatsbyConfig\n  env?: Record<string, string>\n  frameworkHooks?: string\n\n  // default is true\n  runInSubProcess?: boolean\n}\n\ntype InitializeOptions = {\n  clearCache?: boolean\n  context?: Record<string, unknown>\n} & Pick<ContentEngineConfiguration, \"env\">\n\ntype SyncOptions = InitializeOptions & {\n  runServer?: boolean\n  webhookBody?: { [key: string]: any }\n  connector?: string\n\n  buildSchema?: true | boolean\n}\n\nexport interface SyncState {\n  exitCode?: number\n  exited?: boolean\n  error?: {\n    message: string\n    stack: string\n  }\n}\n\nexport interface DataStore\n  extends Pick<IDataStore, \"getNode\" | \"getTypes\" | \"countNodes\" | \"runQuery\"> {\n  getNodes: IDataStore[\"iterateNodes\"]\n  getNodesByType: IDataStore[\"iterateNodesByType\"]\n}\nexport interface ContentEngine {\n  sync: (options?: SyncOptions) => Promise<SyncState>\n  initialize: (options?: InitializeOptions) => Promise<void>\n  restart: (options?: SyncOptions) => Promise<SyncState>\n  stop: () => Promise<void>\n  config: (\n    config: ContentEngineConfiguration\n  ) => Promise<ContentEnginePublicAPI>\n  onStdOut: (callback: (data: string) => void) => void\n  onStdErr: (callback: (data: string) => void) => void\n  onMessage: (callback: (message: any) => void) => void\n  sendMessage: (message: any) => void\n  clearListeners: () => void\n  /**\n   * Test utils, only available when process.env.NODE_ENV === `test`\n   */\n  test: {\n    query: <TData>(\n      query: string,\n      variables?: Record<string, unknown>\n    ) => Promise<ExecutionResult<TData>>\n    getNodes: <NodeFields>() => Promise<Array<IGatsbyNode & NodeFields>>\n    getNode: <NodeFields>(id: string) => Promise<IGatsbyNode & NodeFields>\n    getNodesByType: <NodeFields>(\n      type: string\n    ) => Promise<Array<IGatsbyNode & NodeFields>>\n  }\n  store?: DataStore\n  getProcess: () => ChildProcess\n}\n\nexport type ContentEnginePublicAPI = ContentEngine\n\nexport const contentEngine = (\n  engineOptions?: ContentEngineConfiguration\n): ContentEnginePublicAPI => {\n  const { directory, frameworkHooks } = engineOptions || {}\n\n  if (directory && !existsSync(directory)) {\n    throw new Error(`Content Engine directory does not exist: ${directory}`)\n  }\n\n  if (frameworkHooks && typeof frameworkHooks !== `string`) {\n    throw new Error(\n      `The framework file passed to contentEngine({ frameworkHooks: \"...\" }) must be a string.`\n    )\n  }\n\n  if (frameworkHooks && !existsSync(frameworkHooks)) {\n    throw new Error(\n      `The framework file passed to contentEngine({ frameworkHooks: \"${frameworkHooks}\" }) does not exist. Make sure the path to the framework file is correct.`\n    )\n  }\n\n  engineOptions = {\n    directory: process.cwd(),\n    ...(engineOptions || {}),\n  }\n\n  if (\n    `runInSubProcess` in engineOptions &&\n    engineOptions.runInSubProcess === false\n  ) {\n    process.chdir(engineOptions.directory!)\n    const contentEngineDir = resolveFromContentEngine(\n      `/services/content-engine`,\n      engineOptions?.directory\n    )\n\n    if (\n      !contentEngineDir ||\n      (contentEngineDir && !existsSync(contentEngineDir))\n    ) {\n      throw new Error(\n        `Content Engine directory does not exist: ${contentEngineDir}`\n      )\n    }\n\n    const { contentEngine } = require(contentEngineDir)\n\n    return contentEngine(engineOptions)\n  }\n\n  const state: SyncState = {\n    exited: false,\n  }\n  const internalState: {\n    subProcess?: ControllableScript\n    env: ContentEngineConfiguration[\"env\"]\n    processListenersWereSet: boolean\n    stdErrListeners: Array<(data: string) => void>\n    stdOutListeners: Array<(data: string) => void>\n    messageListeners: Array<(message: any) => void>\n    store?: IDataStore\n  } = {\n    env: engineOptions?.env || {},\n    processListenersWereSet: false,\n    stdErrListeners: [],\n    stdOutListeners: [],\n    messageListeners: [],\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function onceReceived(message: string): Promise<any> {\n    return new Promise(res => {\n      const subprocess = internalState.subProcess as ControllableScript\n\n      if (!subprocess) {\n        new Error(`Content Engine process is not running but should be.`)\n      }\n\n      const exitListener = () => {\n        // @ts-ignore if subProcess is accessed from outside it will be recreated automatically. setting it to null here allows it to be recreated as needed\n        internalState.subProcess = null\n        res(false)\n      }\n\n      const listener = receivedMessage => {\n        if (receivedMessage.type === message) {\n          subprocess.offMessage(listener)\n          subprocess.offExit(exitListener)\n          res(receivedMessage.payload || true)\n        }\n      }\n\n      subprocess.onMessage(listener)\n      subprocess.onExit(exitListener)\n    })\n  }\n\n  const createSubProcessIfNoneExists = async ({\n    env,\n  }: {\n    env: ContentEngineConfiguration[\"env\"]\n  }): Promise<{\n    isRunning: boolean\n  }> => {\n    if (!internalState.subProcess) {\n      state.exited = false\n      state.exitCode = undefined\n      internalState.env = env || internalState.env\n\n      reporter.verbose(`[content-engine] starting subprocess`)\n\n      const contentEngineDir =\n        resolveFromContentEngine(\n          `/services/content-engine`,\n          engineOptions?.directory\n        ) || require.resolve(`./services/content-engine`)\n\n      const reduxDir =\n        resolveFromContentEngine(`/redux`, engineOptions?.directory) ||\n        require.resolve(`./redux`)\n\n      internalState.subProcess = new ControllableScript(\n        `\n          const engineOptions = ${JSON.stringify(engineOptions)}\n          const { contentEngine } = require(\"${contentEngineDir}\")\n          const { saveState } = require(\"${reduxDir}\")\n\n          const engine = contentEngine(engineOptions)\n\n          if (!process.send) {\n            throw new Error(\n              'Started Content Engine as a subprocess, but no parent was found.'\n            )\n          }\n\n          process.send({\n            type: 'CONTENT_ENGINE_CHILD_RUNNING',\n          })\n\n          process.on('message', async message => {\n            if (message.type === 'COMMAND' && message.action?.type === 'EXIT') {\n              saveState()\n              const code = typeof message.action?.payload === 'number'\n                ? message.action.payload\n                : 0\n\n              process.exit(code)\n            } else if (message.type === 'CONTENT_ENGINE_CHILD_SYNC_DATA') {\n              engine.sync(message.payload).then(() => {\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_FINISHED_SYNCING_DATA',\n                })\n              }).catch(e => {\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_FINISHED_SYNCING_DATA',\n                  payload: {\n                    error: {\n                      message: e.message,\n                      stack: e.stack\n                    }\n                  }\n                })\n              })\n            } else if (message.type === 'CONTENT_ENGINE_CHILD_QUERY') {\n              engine.test.query(message.payload.query, message.payload.variables).then(result => {\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_QUERY_RESULT--' + message.payload.queryId,\n                  payload: {\n                    result\n                  }\n                })\n              }).catch(e => {\n                console.error(e)\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_QUERY_RESULT--' + message.payload.queryId,\n                  payload: {\n                    error: e.message,\n                    stack: e.stack\n                  }\n                })\n              })\n            } else if (message.type === 'CONTENT_ENGINE_CHILD_INITIALIZE') {\n              engine.initialize(message.payload).then(() => {\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_FINISHED_INITIALIZING',\n                })\n              }).catch(e => {\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_FINISHED_INITIALIZING',\n                  error: {\n                    message: e.message,\n                    stack: e.stack\n                  }\n                })\n              })\n            } else if (message.type === 'CONTENT_ENGINE_CHILD_INVOKE_TEST_UTIL') {\n              const responseType = 'CONTENT_ENGINE_CHILD_INVOKE_TEST_UTIL_RESULT--' + message.payload.messageId\n\n              function sendError(e) {\n                console.error(e)\n                process.send({\n                  type: 'CONTENT_ENGINE_CHILD_INVOKE_TEST_UTIL_RESULT--' + message.payload.messageId,\n                  payload: {\n                    error: e.message,\n                    stack: e.stack\n                  }\n                })\n              }\n\n              try {\n                const promiseOrResult = engine.test[message.payload.utilName](...message.payload.args)\n\n                if (promiseOrResult && 'then' in promiseOrResult) {\n                  promiseOrResult.then(result => {\n                    process.send({\n                      type: responseType,\n                      payload: {\n                        result\n                      }\n                    })\n                  }).catch(sendError)\n                } else {\n                  process.send({\n                    type: responseType,\n                    payload: {\n                      result: promiseOrResult\n                    }\n                  })\n                }\n              } catch (e) {\n                sendError(e)\n              }\n            }\n          })\n      `,\n        null\n      )\n\n      internalState.subProcess.start({\n        env: internalState.env,\n        directory: engineOptions?.directory,\n      })\n\n      internalState.subProcess.process!.stdout?.on(`data`, data => {\n        internalState.stdOutListeners.forEach(listener => listener(data))\n      })\n\n      internalState.subProcess.process!.stderr?.on(`data`, data => {\n        internalState.stdErrListeners.forEach(listener => listener(data))\n      })\n\n      internalState.subProcess.onMessage(message => {\n        internalState.messageListeners.forEach(listener => listener(message))\n      })\n\n      internalState.subProcess.onExit(exitCode => {\n        state.exitCode = exitCode || undefined\n\n        const proc = internalState.subProcess?.process\n\n        if (proc?.killed || typeof exitCode === `number`) {\n          state.exited = true\n        }\n\n        // @ts-ignore if subProcess is accessed from outside it will be recreated automatically\n        internalState.subProcess = null\n\n        if (typeof exitCode === `number` && exitCode !== 0) {\n          console.error(\n            `[content-engine] Process stopped with exit code ${exitCode}`\n          )\n        }\n      })\n\n      if (!internalState.processListenersWereSet) {\n        internalState.processListenersWereSet = true\n        interface ShutdownServicesOptions {\n          subProcess: ControllableScript\n          code?: number | null\n        }\n\n        function shutdownService(\n          {\n            subProcess,\n            code,\n          }: Partial<ShutdownServicesOptions & typeof internalState>,\n          signal: NodeJS.Signals\n        ): Promise<void> {\n          if (!subProcess) {\n            return Promise.resolve()\n          }\n\n          return subProcess\n            .stop(signal, code || 0)\n            .catch(() => {})\n            .then(() => {})\n        }\n\n        process.on(`message`, msg => {\n          internalState.subProcess?.send(msg)\n        })\n\n        process.on(`SIGINT`, async () => {\n          await shutdownService(internalState, `SIGINT`)\n\n          process.exit(0)\n        })\n\n        process.on(`SIGTERM`, async () => {\n          await shutdownService(internalState, `SIGTERM`)\n\n          process.exit(0)\n        })\n\n        onExit((code, signal) => {\n          shutdownService(\n            {\n              subProcess: internalState.subProcess,\n              code,\n            },\n            signal as NodeJS.Signals\n          )\n        })\n      }\n\n      reporter.verbose(`[content-engine] waiting for subprocess to start`)\n      const isRunning = await onceReceived(`CONTENT_ENGINE_CHILD_RUNNING`)\n\n      return {\n        isRunning,\n      }\n    }\n\n    return {\n      isRunning: true,\n    }\n  }\n\n  const sendFrameworkContext = (context: FrameworkContext) => {\n    if (internalState.subProcess) {\n      internalState.subProcess.send({\n        type: `CONTENT_ENGINE_FRAMEWORK_CONTEXT`,\n        context,\n      })\n    }\n  }\n\n  const initialize: ContentEnginePublicAPI[\"initialize\"] = async (\n    { clearCache, env, context } = {\n      clearCache: false,\n    }\n  ): Promise<void> => {\n    if (env && internalState.subProcess) {\n      console.log(\n        `[content-engine] restarting process since env vars were passed to initialize`\n      )\n      await stop()\n    }\n\n    if (clearCache) {\n      await deleteCache()\n    }\n\n    const { isRunning } = await createSubProcessIfNoneExists({\n      env: env || engineOptions?.env,\n    })\n\n    if (context) {\n      sendFrameworkContext(context)\n    }\n\n    if (!isRunning) {\n      reporter.verbose(`[content-engine] subprocess exited.`)\n      // return early if not running. this means the process exited.\n      return\n    }\n\n    internalState.subProcess!.send({\n      type: `CONTENT_ENGINE_CHILD_INITIALIZE`,\n    })\n\n    const result = await onceReceived(\n      `CONTENT_ENGINE_CHILD_FINISHED_INITIALIZING`\n    )\n\n    if (result?.error) {\n      const newErr = new Error(result.error.message)\n      newErr.stack = result.error.stack\n\n      throw newErr\n    }\n  }\n\n  const deleteCache = async (): Promise<void> => {\n    await stop()\n    const cachePath = path.join(engineOptions!.directory!, `.cache`)\n\n    if (existsSync(cachePath)) {\n      await rm(cachePath, {\n        recursive: true,\n        force: true,\n      })\n    }\n\n    await getStore().resetCache()\n  }\n\n  const sync: ContentEnginePublicAPI[\"sync\"] = async (\n    {\n      clearCache = false,\n      runServer,\n      webhookBody,\n      env,\n      context,\n      buildSchema = true,\n      connector,\n    } = {\n      buildSchema: true,\n    }\n  ): Promise<SyncState> => {\n    state.error = undefined\n\n    if (runServer && !buildSchema) {\n      throw new Error(\n        `Cannot run server without building schema. Set \"runServer: true\" or \"buildSchema: false\" to fix this.`\n      )\n    }\n\n    reporter.verbose(`[content-engine] sync, ${JSON.stringify(env, null, 2)}`)\n\n    if (\n      env &&\n      internalState.subProcess &&\n      JSON.stringify(env) !== JSON.stringify(internalState.env)\n    ) {\n      console.log(\n        `[content-engine] restarting process since new env vars were passed to sync`\n      )\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      await stop()\n    }\n\n    if (clearCache) {\n      await deleteCache()\n    }\n\n    const { isRunning } = await createSubProcessIfNoneExists({\n      env: env || engineOptions?.env,\n    })\n\n    if (context) {\n      sendFrameworkContext(context)\n    }\n\n    if (!isRunning) {\n      reporter.verbose(`[content-engine] subprocess exited.`)\n      // return early if not running. this means the process exited.\n      return state\n    }\n\n    internalState.subProcess!.send({\n      type: `CONTENT_ENGINE_CHILD_SYNC_DATA`,\n      payload: {\n        runServer,\n        webhookBody,\n        buildSchema,\n        connector,\n      },\n    })\n\n    reporter.verbose(`[content-engine] waiting for subprocess to finish sync`)\n    const { error } =\n      (await onceReceived(`CONTENT_ENGINE_CHILD_FINISHED_SYNCING_DATA`)) || {}\n\n    if (error) {\n      state.error = {\n        message: error.message,\n        stack: error.stack,\n      }\n      reporter.verbose(\n        `[content-engine] subprocess finished syncing with errors.`\n      )\n    } else {\n      reporter.verbose(`[content-engine] subprocess finished sync`)\n    }\n\n    return { ...state, error: state.error ? { ...state.error } : undefined }\n  }\n\n  const restart: ContentEnginePublicAPI[\"restart\"] = async (\n    { env, clearCache, buildSchema = true, ...options } = {\n      buildSchema: true,\n    }\n  ): Promise<SyncState> => {\n    await stop()\n\n    if (clearCache) {\n      await deleteCache()\n    }\n\n    console.log(`[content-engine] restarting subprocess`)\n\n    await createSubProcessIfNoneExists({\n      env,\n    })\n\n    return sync({ ...options, buildSchema })\n  }\n\n  const stop = async (\n    signal?: NodeJS.Signals,\n    code: number = 0\n  ): Promise<void> => {\n    if (internalState.subProcess) {\n      console.log(`[content-engine] stopping subprocess`)\n\n      // if a debugger is attached, the process must be killed with SIGKILL or it will hang indefinitely\n      const inDebugMode = inspector.url() !== undefined\n      const exitSignal = inDebugMode ? `SIGKILL` : signal || null\n\n      await internalState.subProcess.stop(exitSignal, code)\n\n      // @ts-ignore if subProcess is accessed from outside it will be recreated automatically\n      internalState.subProcess = null\n    }\n  }\n\n  async function deferTestUtilToSubProcess(\n    utilName: string,\n    args: Array<any>\n  ): Promise<any> {\n    if (!internalState.subProcess) {\n      throw new Error(\n        `contentEngine().test.${utilName}() can only be called when content engine is running.`\n      )\n    }\n\n    // @ts-ignore\n    const messageId = crypto.randomUUID()\n\n    internalState.subProcess.send({\n      type: `CONTENT_ENGINE_CHILD_INVOKE_TEST_UTIL`,\n      payload: {\n        args,\n        messageId,\n        utilName,\n      },\n    })\n\n    const message = await onceReceived(\n      `CONTENT_ENGINE_CHILD_INVOKE_TEST_UTIL_RESULT--${messageId}`\n    )\n\n    if (message?.error) {\n      if (message.error.startsWith(`Error:`)) {\n        message.error = message.error.replace(`Error: `, ``)\n      }\n\n      const newErr = new Error(message.error.message)\n      newErr.stack = message.error.stack\n\n      throw newErr\n    }\n\n    return message?.result\n  }\n\n  function getStore(): IDataStore {\n    internalState.store ||= getLmdbStore({\n      dbPath: getDefaultDbPath(engineOptions?.directory),\n    })\n    return internalState.store\n  }\n\n  const engineApi: ContentEnginePublicAPI = {\n    initialize,\n    sync,\n    restart,\n    stop,\n    config: async (newConfig: ContentEngineConfiguration) => {\n      const normConfig = {\n        directory: newConfig.directory || process.cwd(),\n        ...(newConfig || {}),\n      }\n\n      if (JSON.stringify(normConfig) !== JSON.stringify(engineOptions)) {\n        reporter.info(\n          `[content-engine] restarting process since config changed`\n        )\n        await stop()\n\n        const newEngine = contentEngine(normConfig)\n\n        // update the engineApi with the new engine's methods\n        // so that calling engine.sync() will use the new engine config instead of the old one\n        Object.keys(engineApi).forEach(key => {\n          engineApi[key] = newEngine[key]\n        })\n\n        return newEngine\n      } else {\n        reporter.verbose(\n          `[content-engine] reusing existing engine since the config didn't change`\n        )\n        return engineApi\n      }\n    },\n\n    test: throwOutsideTestEnv({\n      getNodes: () => deferTestUtilToSubProcess(`getNodes`, []),\n      getNodesByType: (...args) =>\n        deferTestUtilToSubProcess(`getNodesByType`, [...args]),\n      getNode: (...args) => deferTestUtilToSubProcess(`getNode`, [...args]),\n      query: (...args: Array<any>) =>\n        deferTestUtilToSubProcess(`query`, [...args]),\n    }),\n\n    store: {\n      getNode: id => getStore().getNode(id),\n      getTypes: () => getStore().getTypes(),\n      countNodes: type => getStore().countNodes(type),\n      getNodes: () => getStore().iterateNodes(),\n      getNodesByType: type => getStore().iterateNodesByType(type),\n      runQuery: args => {\n        process.env.GATSBY_EXPERIMENTAL_LMDB_INDEXES ||= `1`\n        return getStore().runQuery(args)\n      },\n    },\n\n    getProcess(): ChildProcess {\n      createSubProcessIfNoneExists({\n        env: internalState.env,\n      })\n\n      return internalState.subProcess!.process!\n    },\n\n    onStdOut(callback: (data: string) => void): void {\n      internalState.stdOutListeners.push(callback)\n    },\n    onStdErr(callback: (data: string) => void): void {\n      internalState.stdErrListeners.push(callback)\n    },\n    onMessage(callback: (message: any) => void): void {\n      internalState.messageListeners.push(callback)\n    },\n    sendMessage(message: any): void {\n      if (internalState.subProcess) {\n        internalState.subProcess.send(message)\n      } else {\n        throw new Error(\n          `contentEngine().sendMessage() can only be called when content engine is running.`\n        )\n      }\n    },\n    clearListeners(): void {\n      internalState.stdErrListeners = []\n      internalState.stdOutListeners = []\n      internalState.messageListeners = []\n    },\n  }\n\n  return engineApi\n}\n\nexport function throwOutsideTestEnv<T>(fns: Record<string, any>): T {\n  return Object.fromEntries(\n    Object.entries(fns).map(([name, fn]: any) => [\n      name,\n      (...args) => {\n        if (process.env.NODE_ENV !== `test`) {\n          throw new Error(\n            `contentEngine().test.${name}() can only be called from within tests.`\n          )\n        }\n\n        return fn(...args)\n      },\n    ])\n  )\n}\n"],"mappings":"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"}